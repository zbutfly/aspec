开发和管理流程定义
流程自顶向下定义，流程节点之间以产出物为交互媒介。
0. 启动
	在JIRA中创建“XXX项目”。同时在XXX项目下创建“需求”、“设计”、“实现”、“测试”、“部署”直接子任务。
		“设计”任务应包含“需求功能点”、“业务功能点”、“测试用例”子任务。
		“实现”任务应包含“测试用例”子任务以及其他模块实现任务。
		“测试”任务应包含多轮测试，每轮测试对应一个子节点。例如：“集成测试”、“验收测试”（ST Test/UAT Test）等。
1. 需求
	需求采集（项目经理）
		负责向客户或其他需求提供方获取、整理、具体化需求，形成需求概念。
		产出《XXX需求描述》，由需求提供方确认。
	完成以上工作后，项目经理在JIRA标记“XXX项目”-“需求”任务为“完成”。
	需求分析（项目经理）
		根据《XXX需求描述》和当前产品架构/选型/预研结论，将需求概念性描述具体化为需求功能点列表，从而定义系统的范围和子系统划分。
		需求功能点要求：
			完整：需求功能点应包含且仅包含一个完整需求流程的所有业务实现和用户交互。
			耦合：需求功能点实现不应依赖其他业务功能点的实现。
			输入输出：需求功能点自身输入/输出数据格式明确，稳定。
		产出：《XXX需求功能点列表》，由需求提供方确认，对应JIRA中“XXX项目”。
			《XXX需求功能点列表》中的“YYY需求功能点”对应“XXX项目“的“YYY模块”，作为“XXX项目”的“实现”任务的子任务“YYY模块”，由项目经理录入JIRA。
			《XXX需求功能点列表》每个版本发布对应一个SVN分支目录。由项目经理在发布时建立SVN分支。
				初始版本：创建主开发分支（trunk）
				版本替代：将trunk分支备份（tag操作）到SVN的tags目录作为备份，然后修改trunk中的版本号，提交后trunk作为新版本的主开发分支。
				并行版本：将trunk分支分支（branch操作）到SVN的branches目录，并升级该branch的版本号，该branch版本作为并行版本的主开发分支。
				《XXX需求功能点列表》应包含其对应的开发分支信息（可以在文档标题命名中携带开发分支版本号）。
			完成以上工作后，项目经理在JIRA标记“XXX项目”-“设计”-“需求功能点”任务为“完成”。
2. 设计
	总体设计（项目经理）
		根据《XXX需求功能点列表》，定义业务功能点。
		业务功能点要求：
			完整：需求功能点应包含且仅包含一个完整业务功能流程的所有业务实现和用户交互。
			交互：一个业务功能点原则上仅应由一次与用户（业务功能点调用者）的交互。
			耦合：业务功能点实现不应依赖其他业务功能点的实现。
			输入输出：业务功能点输入输出数据结构不应依赖其他业务功能点实现。
			成本：一个业务功能点应由单个开发人员在一周工时内完成。如果超过该限制，应拆分业务功能点。因此业务功能点可以有分级。
		产出：
			《XXX-YYY业务功能点列表》，对应JIRA中“XXX项目”的“YYY模块”。
				《XXX-YYY业务功能点列表》中的“ZZZ业务功能点”对应“YYY模块”的“ZZZ功能”，映射到JIRA中“YYY模块”的“ZZZ功能”，由项目经理录入JIRA。
			《XXX数据模型》，对应持久层（关系数据库/非关系数据库）中的表结构/文档结构。应涵盖所有项目可能持久化使用的数据结构。
				《XXX数据模型》可以携带持久层生成脚本和持久测试数据生成脚本。
			完成以上工作后，项目经理在JIRA标记“XXX项目”-“设计”-“业务功能点”任务为“完成”。
	业务设计（开发人员）（可选）
		根据《XXX-YYY业务功能点列表》，定义每个业务功能点的详细设计。
			可以包含文字描述、流程图、数据结构、表结构。
			可以忽略（简单业务功能）。
			如果需要文档描述，应该是一个简短文档《XXX-YYY-1PD》（One Page Design）。
	测试设计（测试人员）
		根据《XXX-YYY业务功能点列表》，定义《XXX测试用例列表》。
		每一个业务功能点对应多个测试用例，覆盖需要测试的业务场景。
		每一个需求功能点除其业务功能点的测试用例集合外，还应该包含针对完整需求流程的多业务功能点联合测试用例。
		产出：《XXX测试用例列表》，对应JIRA中“XXX项目”的“测试”任务。
			其中每个TTT测试用例对应JIRA的“XXX项目”下“测试”任务的子任务“TTT任务”。
			《XXX测试用例列表》对应SVN当前主开发分支下的testcase子目录
			完成以上工作后，测试人员在JIRA标记“XXX项目”-“设计”-“测试用例”任务为“完成”。
3. 实现
	业务实现（开发人员）：
		开发人员检出代码后，每日开发变更以完整变更形式提交。
			完整变更：每次提交的变更集应保证不影响“XXX系统”所有项目的成功编译构建和已成功联调测试用例。
		开发人员完成一项JIRA任务，应修改JIRA上的任务状态，并附加该项任务相关所有SVN提交变更编号（REV No.）。
			因此，对于粒度符合规范的业务功能点实现任务，应仅仅包含一次实现提交，亦即，开发人员接受任务后应完成所有任务实现并自测通过（满足任务功能点定义的任务需求）后提交代码，并在JIRA标记“XXX项目”-“实现”-“YYY模块”-“ZZZ功能”任务为“完成”，同时填写该任务的代码提交变更编号。
			（同理，每次BUG修复均应仅有一次提交，同时在修改JIRA中BUG状态时填写修复代码提交变更编号）。
	测试用例实现（测试人员）：
		根据《XXX测试用例列表》完成测试用例实现。
		完成测试用例实现后，标记JIRA中“XXX项目”-“实现”-“测试用例”任务为“完成”。
4. 测试
	测试流程分为多个阶段：
	开发测试：由开发人员独自在开发环境中同步进行开发测试，
		当前开发功能点在开发人员开发环境运行。
		持久数据使用联调数据库。
		根据测试用例列表自定义业务功能点内部测试香，（无需涵盖全部测试用例）。
		完成开发测试可以进入联调测试。
	联调测试：由开发人员在开发过程中同步联调测试。主要测试当前开发功能点与其他功能点的交互。
		当前开发功能点在开发人员开发环境中运行。
		持久数据使用联调数据库。
		所交互的相关功能点在联调环境运行。
		根据测试用例列表自定义业务功能点联调测试项，（无需涵盖全部测试用例）。
		完成开发测试可以提交代码。
	集成测试：由测试人员在开发实现阶段完成后运行。
		集成测试应依据当前主分支代码执行标准编译构建流程。
			检出主分支代码。
			完成编译构建获得构建产出物。
			发布到产品仓库（Maven仓库）。
			从产品仓库获得构建产出物，发布到集成测试环境。
		在集成测试环境/集成测试数据库中运行。
		覆盖所有测试用例。
		集成测试产生BUG：
			测试人员在JIRA建立“BUG”任务。
			项目经理负责分派“BUG”任务给正确的开发人员进行修复。
			开发人员修复完成后，提交修复代码，修改“BUG”任务状态为已修复。
				每次BUG修复均应仅有一次提交。
				修改JIRA中BUG状态时填写修复代码提交变更编号。
			测试人员重新运行该测试用例，验证已修复的BUG和可能的新出现BUG。
				若验证通过，修改“BUG”任务状态为关闭。
		所有BUG关闭后，重复完整测集成测试流程（发布产品仓库）。
		完成集成测试后可以发布产品正式版本，可以进入验收测试。
			检出主分支代码（应保证与成功集成测试基准REV一致）。
			去除版本号中的“SNAPSHOT”标签。
			执行标准化构建，构建产出发布产品仓库，成为RELEASE版本。
			测试人员提供《XXX项目集成测试报告》，主要包括测试统计数据如BUG规模、BUG分布、修复时间分布、重现分布等。
	验收测试：由用户验收人员在完成集成测试阶段后进行。
		验收测试应依据此前成功完成的集成测试构建产出物。
			从产品仓库获得集成测试成功产出物（根据版本号）。
			发布验收环境。
		在验收环境/验收数据库中运行。验收环境/验收数据库应完全等同于生产环境/生产数据库。
		覆盖所有测试用例。
		验收测试产生BUG：
			测试人员在JIRA建立“BUG”任务。
			项目经理建立代码仓库的BUGFIX分支（在branches中）。
			项目经理负责分派“BUG”任务给正确的开发人员进行修复。
			开发人员在BUGFIX分支上进行修复。
				完成后，提交修复代码，修改“BUG”任务状态为已修复。
				每次BUG修复均应仅有一次提交。
				修改JIRA中BUG状态时填写修复代码提交变更编号。
			验收BUG修正后：
				测试人员在BUGFIX分支上开始一个新的集成测试流程。
				若集成验证通过，修改“验收BUG”任务状态为关闭。
				所有验收BUG关闭后
					项目经理合并BUGFIX分支回到主分支。
					清理BUGFIX分支。
					重新构建，重新发布产品仓库。
						覆盖产品原RELEASE版本或升级版本（增加版本后缀）。
				测试人员在主分支上开始一个新的验收测试流程。
		完成验收测试后可以上线（发布生产环境，开始生产运维）。
			测试人员提供《XXX项目验收测试报告》，主要包括测试统计数据如BUG规模、BUG分布、修复时间分布、重现分布等。
5. 部署
	部署生产环境应依据此前成功完成的集成测试构建产出物。
		从产品仓库获得集成测试成功产出物（根据版本号）。
		发布验生产环境。
	成功部署后：
		备份原主开发分支到SVN仓库的tags目录。
		升级主分支中主版本号并增加SNAPSHOT，作为下个版本的主开发分支。
		项目经理关闭JIRA中“部署”任务。
		进入下一个版本迭代生命周期。

实例：以“云平台监控”为例：
JIRA建立项目“云平台监控”。其中结构如下：
	云平台监控
		需求
		设计
			需求功能点
			业务功能点
			测试用例
		实现
			测试用例
		测试
			集成测试
			验收测试
		部署
SVN建立：
	http://svn.hzcominfo.com/cloudy-platform-monitor/trunk
	http://svn.hzcominfo.com/cloudy-platform-monitor/branches
	http://svn.hzcominfo.com/cloudy-platform-monitor/tags
《云平台监控需求描述》
《云平台监控需求功能点列表》
	其中定义了三个需求功能点。
		“CPU监控”
		“业务接口存活监控”
		“业务接口流量监控”
《CPU监控功能点列表》
	其中针对第一个需求功能点定义了四个业务功能点。
		“CPU数据采集”
		“CPU数据保存”
		“CPU数据查询”
		“CPU数据查询结果图形化展现”
《CPU监控测试用例列表》
	其中针对第一个功能点定义了三个测试用例。
		“CPU数据采集 - 正常运行CPU数据采集”
		“CPU数据采集 - 不存在CPU数据采集”
		“CPU数据采集 - 超负荷挂起CPU数据采集”
《XXX项目集成测试报告》
《XXX项目验收测试报告》
JIRA
	云平台监控
		需求
		设计
			需求功能点
			业务功能点
			测试用例
		实现
			测试用例
			CPU监控
				“CPU数据采集”
				“CPU数据保存”
				“CPU数据查询”
				“CPU数据查询结果图形化展现”
			业务接口存活监控
			业务接口流量监控
		测试
			集成测试
				“CPU数据采集 - 正常运行CPU数据采集”
				“CPU数据采集 - 不存在CPU数据采集”
				“CPU数据采集 - 超负荷挂起CPU数据采集”
			验收测试
				“CPU数据采集 - 正常运行CPU数据采集”
				“CPU数据采集 - 不存在CPU数据采集”
				“CPU数据采集 - 超负荷挂起CPU数据采集”
		部署